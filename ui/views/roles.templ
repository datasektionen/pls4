package views

import (
	"strconv"

	"github.com/google/uuid"
	"github.com/datasektionen/pls4/models"
)

templ Roles(roles []models.Role, mayCreate bool, deletable map[string]struct{}) {
	<h2 class="text-2xl font-bold">Roles</h2>
	<section class={ "grid grid-cols-[repeat(" + ternary(len(deletable) > 0, "4", "3") + ",auto)] gap-2 items-center p-4" }>
		<p class="font-bold">Name</p>
		<p class="font-bold">Members</p>
		<p class="font-bold">Description</p>
		if len(deletable) > 0 {
			<p class="font-bold">Options</p>
		}
		for _, role := range roles {
			<hr class="col-span-full"/>
			<a href={ templ.URL("/role/" + role.ID) }>{ role.DisplayName }</a>
			<span>
				if role.SubroleCount > 0 {
					<p>{ strconv.Itoa(role.SubroleCount) } sub-role{ plural(role.SubroleCount) }</p>
				}
				if role.MemberCount > 0 {
					<p>{ strconv.Itoa(role.MemberCount) } member{ plural(role.SubroleCount) }</p>
				}
			</span>
			<span>{ role.Description }</span>
			if _, ok := deletable[role.ID]; ok {
				<form
					class="text-red-800"
					hx-delete={ "/role/" + role.ID }
					hx-swap="innerHTML"
					hx-confirm="Are you sure?"
					hx-target="main"
				>
					<button>Delete</button>
				</form>
			}
		}
	</section>
	if mayCreate {
		<section class="p-4 pt-0" hx-swap="outerHTML">
			<button class="bg-slate-300 w-8 h-8" hx-get="/role">+</button>
		</section>
	}
}

templ CreateRoleForm(roles []models.Role) {
	<form hx-post="/role" class="flex gap-2 flex-col p-4 pt-0 flex-wrap" hx-target="main" hx-swap="innerHTML">
		<h3 class="text-xl font-bold">Create role</h3>
		<div>
			<label for="id">ID:</label>
			<input
				class="border-b border-black"
				type="text"
				id="id"
				name="id"
				pattern="[a-z0-9]+(-[a-z0-9]+)*"
				required
			/>
			<label for="display-name">Display name:</label>
			<input class="border-b border-black" type="text" id="display-name" name="display-name" required/>
		</div>
		<div>
			<label for="discription">Description:</label>
			<br/>
			<textarea class="border-b border-black" id="description" name="description"></textarea>
		</div>
		<div>
			<label for="owner">Managed by:</label>
			<select name="owner" id="owner" class="p-2">
				for _, role := range roles {
					<option value={ role.ID }>{ role.DisplayName }</option>
				}
				<option>(none)</option>
			</select>
			<p class="text-gray-600">This role will get permission to manage the created role</p>
		</div>
		<div class="flex justify-center">
			<button class="bg-blue-300 px-4 p-2 rounded-md">Create</button>
		</div>
	</form>
}

templ RoleNameDisplay(roleID string, displayName string, mayUpdate bool) {
	<h1
		class="text-3xl font-bold"
		if mayUpdate {
			hx-get={ "/role/" + roleID + "/name" }
			hx-swap="outerHTML"
		}
	>
		{ displayName }
		if mayUpdate {
			<i class="fa-regular fa-pen-to-square"></i>
		}
	</h1>
}

templ RoleNameForm(role models.Role) {
	<form
		class="text-3xl"
		hx-post={ "/role/" + role.ID + "/name" }
		hx-swap="outerHTML"
	>
		<input name="display-name" type="text" value={ role.DisplayName }/>
		<input class="bg-blue-300 p-2 rounded-sm" type="submit" value="Save"/>
	</form>
}

templ RoleDescriptionDisplay(roleID string, description string, mayUpdate bool) {
	<p
		class="p-2"
		if mayUpdate {
			hx-get={ "/role/" + roleID + "/description" }
			hx-swap="outerHTML"
		}
	>
		{ description }
		if mayUpdate {
			<i class="fa-regular fa-pen-to-square"></i>
		}
	</p>
}

templ RoleDescriptionForm(role models.Role) {
	<form
		hx-post={ "/role/" + role.ID + "/description" }
		hx-swap="outerHTML"
	>
		<textarea required class="p-2 w-96" name="description">{ role.Description }</textarea>
		<input class="block bg-blue-300 p-1 rounded-sm" type="submit" value="Save"/>
	</form>
}

templ Role(
	role models.Role,
	subroles []models.Role,
	members []models.Member,
	permissions []models.SystemPermissionInstances,
	mayUpdate, mayAddPermissions bool,
	mayDeleteInSystems map[string]struct{},
) {
	@RoleNameDisplay(role.ID, role.DisplayName, mayUpdate)
	@RoleDescriptionDisplay(role.ID, role.Description, mayUpdate)
	<h2 class="text-xl">Sub-roles</h2>
	@Subroles(role.ID, subroles, mayUpdate)
	<h2 class="text-xl">Members</h2>
	@Members(role.ID, members, mayUpdate, uuid.Nil, false)
	<h2 class="text-xl">Permissions</h2>
	@Permissions(role.ID, permissions, mayAddPermissions, mayDeleteInSystems)
}
